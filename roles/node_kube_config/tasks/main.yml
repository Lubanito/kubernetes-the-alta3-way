---
# Note, none of these commands should be idempotent so we just run them again if we run these tasks again
# TODO these could probably just be a jinja2 template file for kubconfig (the resulting config file)
# TODO the tough part is they are setup with embedded certs, maybe if we looked into not embedding them

#-----------------------------------------------------------------------------
# Node configuration files - Setting the cluster 
#-----------------------------------------------------------------------------

- name: Set the config file for each node
  command: kubectl config set-cluster {{ cluster_name }} \
           --certificate-authority={{ ca_pem_file }} \
           --embed-certs=true \ 
           --server={{ localhost_lb_apiserver_address }} \
           --kubeconfig={{ item }}.kubeconfig
  args: 
    chdir: "{{ config_dir }}"
  loop: "{{ groups['nodes'] }}"

#-----------------------------------------------------------------------------
# Node configuration files - Setting the credentials
#-----------------------------------------------------------------------------

- name: Set the credentials for each node
  command: kubectl config set-credentials system:node:{{ item }} \
           --client-certificate={{ cert_dir }}/{{ item }}.pem \
           --client-key={{ cert_dir }}/{{ item }}-key.pem \
           --embed-certs=true \
           --kubeconfig={{ item }}.kubeconfig
  args: 
    chdir: "{{ config_dir }}"
  loop: "{{ groups['nodes'] }}"

#-----------------------------------------------------------------------------
# Node configuration files - Set-context default
#-----------------------------------------------------------------------------

- name: Set the context default for each node
  command: kubectl config set-context default \
           --cluster={{ cluster_name }} \
           --user=system:node:{{ item }} \
           --kubeconfig={{ item }}.kubeconfig
  args: 
    chdir: "{{ config_dir }}"
  loop: "{{ groups['nodes'] }}"
  
#-----------------------------------------------------------------------------
# Node configuration files - Use-context default
#-----------------------------------------------------------------------------

- name: Use the context default for each node
  command: kubectl config use-context default \
           --kubeconfig={{ item }}.kubeconfig
  args: 
    chdir: "{{ config_dir }}"
  loop: "{{ groups['nodes'] }}"

#-----------------------------------------------------------------------------
# Node configuration - Generating client authentication config files
#-----------------------------------------------------------------------------

- name: auth kubeconfig files - create
  command: kubectl config set-cluster {{ cluster_name }} \
           --certificate-authority={{ ca_pem_file }} \
           --embed-certs=true \
           --server={{ item.server }} \
           --kubeconfig={{ item.config }} 
  args:
    chdir: "{{ config_dir }}"
  loop: "{{ auth_kubeconfigs }}"
  loop_control:
    label: "config={{ item.config }}"
  
- name: auth kubeconfig - set credentials 
  command: kubectl config set-credentials {{ item.name }} \
           --client-certificate={{ item.pem }} \
           --client-key={{ item.key }} \
           --embed-certs=true \
           --kubeconfig={{ item.config }} 
  args:
    chdir: "{{ config_dir }}"
  loop: "{{ auth_kubeconfigs }}"
  loop_control:
    label: "config={{ item.config }}"
  
- name: auth kubeconfig - set context
  command: kubectl config set-context default \
           --cluster={{ cluster_name }} \
           --user={{ item.user }} \
           --kubeconfig={{ item.config }} 
  args:
    chdir: "{{ config_dir }}"
  loop: "{{ auth_kubeconfigs }}"
  loop_control:
    label: "config={{ item.config }}"

- name: auth kubeconfig - use context
  command: kubectl config use-context default \
           --kubeconfig={{ item.config }} 
  args:
    chdir: "{{ config_dir }}"
  loop: "{{ auth_kubeconfigs }}"
  loop_control:
    label: "config={{ item.config }}"
