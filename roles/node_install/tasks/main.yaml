#-----------------------------------------------------------------------------
# Create Directories for nodes
#-----------------------------------------------------------------------------

  - name: create directories for the kubernetes nodes
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "/etc/cni/net.d"
    - "/opt/cni/bin"
    - "/var/lib/kubelet"
    - "/var/lib/kube-proxy"
    - "/var/lib/kubernetes"
    - "/var/run/kubernetes"
    become: yes



#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
#-------------------------------------------------------------------------------------------------------------------------------
# Check if files exist before clobbering a working system - certs - **** THIS WILL BE MOVED TO MAKECERTS AT SOME POINT SOON****
#-------------------------------------------------------------------------------------------------------------------------------
  - name: Check if node-x.pem exists in the path
    stat:
      path: "/var/lib/kubelet/{{ inventory_hostname }}.pem"
    register: "{{ inventory_hostname }}_pem"

  - name: Check if node-x-key.pem exists in the path
    stat:
      path: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"
    register: "{{ inventory_hostname }}_key_pem"

#TODO add some comment to these sections, and maybe rename reload to generate_keys etc
  - set_fact:
      reload: false

  - set_fact:
      reload: true
    when: ({{ inventory_hostname }}_pem.stat.exists == false) or ({{ inventory_hostname }}_key_pem.stat.exists == false)


#--------------------------------------------------------------------------------------------------------------------
# Create the Kubelet Client Certificates for each node -- ****THIS WILL BE MOVED TO MAKECERTS AT SOME POINT SOON*****
#--------------------------------------------------------------------------------------------------------------------
  - name: Generate the certificate config file for nodes (file same on all nodes)
    template:
      src: "{{ role_path }}/templates/node-csr.json.j2" #TODO clean up templates dir of node-x-csr.json.j2
      dest: "/home/student/node-csr.json" 
    when: reload
    #become: yes 

  - name: Generate the specific certificate and Private key for each node when it does not already exist
    local_action:
      module: shell cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname={{ inventory_hostname }},{{ ansible_host }} -profile=kubernetes node-csr.json | cfssljson -bare {{ inventory_hostname }}
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload


#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

#-----------------------------------------------------------------------------
# Copy Certs to the Kubernetes nodes
#-----------------------------------------------------------------------------
  - name: Copy Certs to Nodes
    copy:
      src: '{{ item.source }}'
      dest: '{{ item.dest }}'
      mode: '{{ item.mode }}'
      owner: student
      group: student
    with_items:
    #TODO delete if not necessary- { source: /var/lib/kubernetes/ca-key.pem,             dest: /home/student/ca-key.pem,             mode: "0600" } 
    #TODO does this get moved? - { source: /var/lib/kubernetes/,                   dest: /home/student/encryption-config.yaml,        mode: "0664" }
    - { source: "/var/lib/kubernetes/ca.pem", dest: "/var/lib/kubernetes/ca.pem", mode: "0664" }
    - { source: "/var/lib/kubernetes/kubernetes.pem", dest: "/etc/etcd/kubernetes.pem", mode: "0664" }
    - { source: "/var/lib/kubernetes/kubernetes-key.pem", dest: "/etc/etcd/kubernetes-key.pem", mode: "0600" }
    - { source: "/var/lib/kubernetes/kubernetes.pem", dest: "/var/lib/kubernetes.pem", mode: "0664" }
    - { source: "/var/lib/kubernetes/kubernetes-key.pem", dest: "/var/lib/kubernetes-key.pem", mode: "0600" }
    - { source: "/var/lib/kubernetes/{{ inventory_hostname }}.pem", dest: "/var/lib/kubelet/{{ inventory_hostname }}.pem", mode: "0600" }
    - { source: "/var/lib/kubernetes/{{ inventory_hostname }}.pem", dest: "/var/lib/kubelet/{{ inventory_hostname }}.pem", mode: "0600" }
    - { source: "/var/lib/kubernetes/{{ inventory_hostname }}-key.pem",  dest: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem", mode: "0644" }
    become: yes
#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\



#-----------------------------------------------------------------------------
# Node configuration files - Setting the cluster (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: Set the config file for each node
    local_action:
      module: shell kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/var/lib/kubernetes/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig={{ inventory_hostname }}.kubeconfig
    #shell: kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/var/lib/kubernetes/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=node-1.kubeconfig
      args: 
        chdir: "{{ role_path }}/templates"
    when: reload


#-----------------------------------------------------------------------------
# Node configuration files - Setting the credentials (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: Set the credentials for each node
    local_action:
      module: shell kubectl config set-credentials system:node:{{ inventory_hostname }} --client-certificate=/home/student/k8s-certs/{{ inventory_hostname }}.pem --client-key=/home/student/k8s-certs/{{ inventory_hostname }}-key.pem --embed-certs=true --kubeconfig={{ inventory_hostname }}.kubeconfig
    #shell: kubectl config set-credentials system:node:node-1 --client-certificate=/home/student/k8s-certs/node-1.pem --client-key=/home/student/k8s-certs/node-1-key.pem --embed-certs=true --kubeconfig=node-1.kubeconfig
      args:
        chdir: "{{ role_path }}/templates"
    when: reload
    

#-----------------------------------------------------------------------------
# Node configuration files - Set-context default (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: Set the context default for each node
    local_action:
      module: shell kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=system:node:{{ inventory_hostname }} --kubeconfig={{ inventory_hostname }}.kubeconfig
    #shell: kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=system:node:node-1 --kubeconfig=node-1.kubeconfig
      args:
        chdir: "{{ role_path }}/templates"
    when: reload

    
#-----------------------------------------------------------------------------
# Node configuration files - Use-context default (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: Use the context default for each node
    local_action:
      module: shell kubectl config use-context default --kubeconfig={{ inventory_hostname }}.kubeconfig
    #shell: kubectl config use-context default --kubeconfig=node-1.kubeconfig
      args:
        chdir: "{{ k8sconfigdir }}" 
    when: reload
    

#-----------------------------------------------------------------------------
# Node configuration files - Generating cert and key (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------
  - name: Generate kube-proxy client cert and private key (kube-proxy-key.pem & kube-proxy.pem)
    local_action: 
      module: shell cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
      args:
        chdir: "{{ k8scertsdir }}"
    when: reload #TODO change this to be creates (shell) so its part of the module parameters and reduces the need for when: reloads


#-----------------------------------------------------------------------------
# Node configuration - Generating client authentication config file (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: create the client auth config file using the ca cert
    local_action: 
      module: shell kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/home/student/k8s-certs/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-proxy.kubeconfig 
      args:
        chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: add the kube-proxy cert and key to the config
    local_action:
      module: shell kubectl config set-credentials kube-proxy --client-certificate=/home/student/k8s-certs/kube-proxy.pem --client-key=/home/student/k8s-certs/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig 
      args:
        chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: set the config user to be kube-proxy
    local_action:
      module: shell kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
      args:
        chdir: "{{ k8sconfigdir }}" 
    when: reload

  - name: set the default kubeconfig to be kube-proxy.kubeconfig
    local_action: 
      module: shell kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
      args:
        chdir: "{{ k8sconfigdir }}" 
    when: reload    


#-----------------------------------------------------------------------------
# Node configuration - Generating client authentication config file (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

  - name: Copy configuration files out to kubernetes nodes
    copy:
      src: "{{ item.source }}"
      dest: "{{ item.dest }}"
    with_items: 
    - { source: "{{ k8sconfigdir }}/kube-proxy.kubeconfig", dest: "/var/lib/kube-proxy/kubeconfig", mode: "0600" } #TODO what is the mode here?
    - { source: "{{ k8sconfigdir }}/{{ inventory_hostname }}.kubeconfig", dest: "/var/lib/kubelet/kubeconfig", mode: "0600" }
    become: yes


#/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
#-----------------------------------------------------------------------------
# Bootstrap Kubernetes Nodes
#-----------------------------------------------------------------------------
#/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\



#-----------------------------------------------------------------------------
# Installing OS Dependencies 
#-----------------------------------------------------------------------------

  - name: Install socat on the kubernetes nodes
    apt: 
      name: socat
      state: present


#-----------------------------------------------------------------------------
# Create Directories for Installation of Node Binaries 
#-----------------------------------------------------------------------------

  - name: Create the install directories
    file: 
      path: "{{ item }}"
      state: directory
      mode: "0750" 
    with_items: 
    - "/etc/cni/net.d/"
    - "/opt/cni/bin/"
    - "/var/lib/kubelet/"
    - "/var/lib/kube-proxy/"
    - "/var/lib/kubernetes/"
    - "/var/run/kubernetes/"
    become: yes

#-----------------------------------------------------------------------------
# Downloading and Installing Node Binaries 
#-----------------------------------------------------------------------------

  - name: Download the Node binaries
    get_url:
      url: "{{ item }}"
      dest: "/usr/local/bin/"
      mode: "0755"
    become: yes 
    with_items:
    - https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl
    - https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kube-proxy
    - https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubelet

  - name: install the kubernetes binaries
    unarchive:
      src: "{{ item.source }}"
      dest: "{{ item.dest }}"
    with_items:
    - { source: "https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz", dest: "/opt/cni/bin/" }
    - { source: "https://github.com/containerd/cri-containerd/releases/download/v1.0.0-beta.1/cri-containerd-1.0.0-beta.1.linux-amd64.tar.gz", dest: "/" }


#/\/\/\/\/\/\/\/\/\\/\/\/\/\//\/\/\/\/\/\//\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\
#-----------------------------------------------------------------------------
# Configure CNI Networking 
#-----------------------------------------------------------------------------
#/\/\/\/\/\/\/\/\/\\/\/\/\/\//\/\/\/\/\/\//\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\

  - name: Create the 10-bridge.conf file for each node. Provides networking info for pods deployed to this node
    template:
      src: "{{ role_path }}/templates/10-bridge.conf.j2"
      dest: "/etc/cni/net.d/10-bridge.conf"
    become: yes

  - name: Create the 99-loopback.conf file for each node. 
    copy: 
      src: "{{ role_path }}/files/99-loopback.conf"
      dest: "/etc/cni/net.d"
    become: yes    

  - name: Create the pod-routes file for each node. Sets routes to get outbound connections from the calico network
    copy: 
      src: "{{role_path}}/files/{{ inventory_hostname }}-pod-routes"
      dest: "/etc/network/if-up.d/pod-routes"
      mode: "0755"
    become: yes


#-----------------------------------------------------------------------------
# Configure the Kubelet
#-----------------------------------------------------------------------------


  - name: Create the kubelet.service config file for each node
    template:
      src: "{{ item.source }}"
      dest: "{{ item.dest }}"
    with_items:    
    - { source: "{{ role_path }}/templates/kubelet.service.j2", dest: "/etc/systemd/system/kubelet.service" }
    - { source: "{{ role_path }}/templates/kube-proxy.service.j2", dest: "/etc/systemd/system/kube-proxy.service" }
    become: yes


#-----------------------------------------------------------------------------
# Start the Worker Services 
#-----------------------------------------------------------------------------

  - name: Do a reload of the daemons
    systemd: 
      daemon_reload: yes

  - name: Enable the new services
    systemd:
      enabled: yes
      name: "{{ item }}"
    with_items:
    - "containerd"
    - "cri-containerd"
    - "kubelet"
    - "kube-proxy"

  - name: Start the services
    systemd: 
      state: restarted #TODO check if not having this set to started causes any havoc
      name: "{{ item }}"
    with_items:
    - "containerd"
    - "cri-containerd"
    - "kubelet"
    - "kube-proxy"






