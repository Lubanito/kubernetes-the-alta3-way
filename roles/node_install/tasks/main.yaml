
#-----------------------------------------------------------------------------
# Create Directories for nodes
#-----------------------------------------------------------------------------

  - name: create directories for the kubernetes nodes
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "/etc/cni/net.d"
    - "/opt/cni/bin"
    - "/var/lib/kubelet"
    - "/var/lib/kube-proxy"
    - "/var/lib/kubernetes"
    - "/var/run/kubernetes"
    become: yes

#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
#-------------------------------------------------------------------------------------------------------------------------------
# Check if files exist before clobbering a working system - certs - **** THIS WILL BE MOVED TO MAKECERTS AT SOME POINT SOON****
#-------------------------------------------------------------------------------------------------------------------------------

  - name: Check if node-1.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-1.pem
    register: node_1_pem

  - name: Check if node-1-key.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-1-key.pem
    register: node_1_key_pem

  - name: Check if node-2.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-2.pem
    register: node_2_pem

  - name: Check if node-2-key.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-2-key.pem
    register: node_2_key_pem

  - name: Check if node-3.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-3.pem
    register: node_3_pem

  - name: Check if node-3-key.pem exists in the path
    stat:
      path: /var/lib/kubelet/node-3-key.pem
    register: node_3_key_pem

# don't think we need this because this will already exist, right?
#  - name: Check if ca.pem exists in the path
#    stat:
#      path: /var/lib/kubelernetes/ca.pem
#    register: ca_pem

  - set_fact:
      reload: false

  - set_fact:
      reload: true
    when: (node_1_pem.stat.exists == false) or (node_1_key_pem.stat.exists == false) or (node_2_pem.stat.exists == false) or (node_2_key_pem.stat.exists == false) or (node_3_pem.stat.exists == false) or (node_3_key_pem.stat.exists == false) or (ca_pem.stat.exists == false)


#--------------------------------------------------------------------------------------------------------------------
# Create the Kubelet Client Certificates for each node -- ****THIS WILL BE MOVED TO MAKECERTS AT SOME POINT SOON*****
#--------------------------------------------------------------------------------------------------------------------

  - name: Generate the certificate config file for node-1
    template:
      src: "{{ role_path }}/templates/node-1-csr.json.j2"
      dest: /home/student/node-1-csr.json 
    when: reload


  - name: Generate the Certificate and Private key for node-1 when it does not already exist
    shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=node-1,172.16.1.8 -profile=kubernetes node-1-csr.json | cfssljson -bare node-1
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload

  - name: Generate the certificate config file for node-2
    template:
      src: "{{ role_path }}/templates/node-2-csr.json.j2"
      dest: /home/student/node-2-csr.json 
    when: reload

  - name: Generate the Certificate and Private key for node-2 when it does not already exist
    shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=node-2,172.16.1.9 -profile=kubernetes node-2-csr.json | cfssljson -bare node-2
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload

  - name: Generate the certificate config file for node-3
    template:
      src: "{{ role_path }}/templates/node-3-csr.json.j2"
      dest: /home/student/node-3-csr.json 
    when: reload

  - name: Generate the Certificate and Private key for node-3 when it does not already exist
    shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -hostname=node-3,172.16.1.10 -profile=kubernetes node-3-csr.json | cfssljson -bare node-3
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload
#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\


#-----------------------------------------------------------------------------
# Copy Certs to the Kubernetes nodes
#-----------------------------------------------------------------------------

  - name: Copy Certs to Nodes
    copy:
      src: '{{ item.source }}'
      dest: '{{ item.dest }}'
      mode: '{{ item.mode }}'
      owner: student
      group: student
    with_items:
    - { source: /var/lib/kubernetes/, dest: /home/student/encryption-config.yaml, mode: "0664" }
    - { source: /var/lib/kubernetes/ca.pem,                 dest: /var/lib/kubernetes/ca.pem,           mode: "0664" }
 #where does kubernetes-key.pem and kubernetes.pem go?   - { source: /var/lib/kubernetes/ca-key.pem,             dest: /home/student/ca-key.pem,             mode: "0600" } 
 #   - { source: /var/lib/kubernetes/,         dest: /etc/etcd/kubernetes.pem,                           mode: "0664" }
 #   - { source: /var/lib/kubernetes/,     dest: ,                                                       mode: "0600" }
    - { source: /var/lib/kubernetes/node-1.pem,         dest: /var/lib/kubelet/node-1.pem,                 mode: "0600" }
    - { source: /var/lib/kubernetes/node-1-key.pem,     dest: /var/lib/kubelet/node-1-key.pem,             mode: "0644" }
    - { source: /var/lib/kubernetes/node-2.pem,         dest: /var/lib/kubelet/node-2.pem,                 mode: "0600" }
    - { source: /var/lib/kubernetes/node-2-key.pem,     dest: /var/lib/kubelet/node-2-key.pem,             mode: "0644" }
    - { source: /var/lib/kubernetes/node-3.pem,         dest: /var/lib/kubelet/node-3.pem,                 mode: "0600" }
    - { source: /var/lib/kubernetes/node-3-key.pem,     dest: /var/lib/kubelet/node-3-key.pem,             mode: "0644" }
    become: yes
#/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\


#-----------------------------------------------------------------------------
# Node configuration files - Setting the cluster (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------


  - name: Set the config file for node-1
    shell: kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/var/lib/kubernetes/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=node-1.kubeconfig
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload

  - name: Set the config file for node-2
    shell: kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/var/lib/kubernetes/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=node-2.kubeconfig
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload

  - name: Set the config file for node-3
    shell: kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/var/lib/kubernetes/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=node-3.kubeconfig
    args: 
      chdir: "{{ role_path }}/templates"
    when: reload

#-----------------------------------------------------------------------------
# Node configuration files - Setting the credentials (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------



  - name: Set the credentials for node-1
    shell: kubectl config set-credentials system:node:node-1 --client-certificate=/home/student/k8s-certs/node-1.pem --client-key=/home/student/k8s-certs/node-1-key.pem --embed-certs=true --kubeconfig=node-1.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload
    
  - name: Set the credentials for node-2
    shell: kubectl config set-credentials system:node:node-2 --client-certificate=/home/student/k8s-certs/node-2.pem --client-key=/home/student/k8s-certs/node-2-key.pem --embed-certs=true --kubeconfig=node-2.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload
    
  - name: Set the credentials for node-3
    shell: kubectl config set-credentials system:node:node-3 --client-certificate=/home/student/k8s-certs/node-3.pem --client-key=/home/student/k8s-certs/node-3-key.pem --embed-certs=true --kubeconfig=node-3.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload    


#-----------------------------------------------------------------------------
# Node configuration files - Set-context default (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------



  - name: Set the context default for node-1
    shell: kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=system:node:node-1 --kubeconfig=node-1.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload
    
  - name: Set the context default for node-2
    shell: kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=system:node:node-2 --kubeconfig=node-2.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload
    
  - name: Set the context default for node-3
    shell: kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=system:node:node-3 --kubeconfig=node-3.kubeconfig
    args:
      chdir: "{{ role_path }}/templates"
    when: reload    



#-----------------------------------------------------------------------------
# Node configuration files - Use-context default (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------



  - name: Use the context default for node-1
    shell: kubectl config use-context default --kubeconfig=node-1.kubeconfig
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: Use the context default for node-2
    shell: kubectl config use-context default --kubeconfig=node-2.kubeconfig
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: Use the context default for node-3
    shell: kubectl config use-context default --kubeconfig=node-3.kubeconfig
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload    



#-----------------------------------------------------------------------------
# Node configuration files - Generating cert and key (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------


  - name: Generate kube-proxy client cert and private key
    shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy
    args:
      chdir: "{{ k8scertsdir }}"
    when: reload #is this needed at this point? I believe so, so that everything matches and certs / keys go with each other.

  - name: Use the context default for node-1
    shell: kubectl config use-context default --kubeconfig=node-1.kubeconfig
    args:
      chdir: "{{ k8scertsdir }}"
    when: reload
    
  - name: Use the context default for node-2
    shell: kubectl config use-context default --kubeconfig=node-2.kubeconfig
    args:
      chdir: "{{ k8scertsdir }}"
    when: reload
    

#-----------------------------------------------------------------------------
# Node configuration - Generating client authentication config file (convert to k8s_raw and or command vs shell)
#-----------------------------------------------------------------------------

    
 
  - name: create the client auth config file using the ca cert
    shell: kubectl config set-cluster kubernetes-the-alta3-way --certificate-authority=/home/student/k8s-certs/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-proxy.kubeconfig 
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: add the kube-proxy cert and key to the config
    shell: kubectl config set-credentials kube-proxy --client-certificate=/home/student/k8s-certs/kube-proxy.pem --client-key=/home/student/k8s-certs/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig 
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload
    
  - name: set the config user to be kube-proxy
    shell: kubectl config set-context default --cluster=kubernetes-the-alta3-way --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload    

  - name: set the default kubeconfig to be kube-proxy.kubeconfig
    shell: kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
    args:
      chdir: "{{ k8sconfigdir }}" 
    when: reload    



##### Step nine from the 03-workers.md is the next step.


https://docs.ansible.com/ansible/2.5/modules/k8s_raw_module.html





