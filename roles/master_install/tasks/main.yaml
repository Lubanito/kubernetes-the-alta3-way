---
 - name: Create k8s directories on masters
   file:
     path: "{{ item }}"
     state: directory
   loop:
   - "/var/lib/etcd"
   - "/var/lib/kubernetes"
   become: True
 
 - name: Copy Certs and Config to Masters
   copy:
     src: "{{ item.src }}"
     dest: "{{ item.dest }}"
     mode: "{{ item.mode }}"
   loop: "{{ deployed_cert_and_config_files }}"
   become: True
 
 - name: Download the master service binaries
   get_url:
     url: "{{ item.url }}"
     dest: "{{ item.path }}"
     mode: "{{ item.mode }}"
   loop: "{{ master_services }}"
   loop_control: 
     label: "{{ item.display_name }} -> {{ item.path }}"
   become: True
 
 - name: Push the config files for the master services
   template:
     src: "{{ item.service_j2 }}"
     dest: "{{ item.service_path }}"
   loop: "{{ master_services }}"
   loop_control: 
     label: "{{ item.display_name }} -> {{ item.service_path }}"
   become: True 
 
 - name: Download Kubernetes kubectl 
   get_url:
     url: "{{ item.url }}"
     dest: "{{ item.dest }}"
     mode: "{{ item.mode }}"
   loop:
    - url: "{{ kubectl.url }}"
      dest: "{{ kubectl.path }}"
      mode: '0755'
   become: True    
 
 - name: Reload systemd manager
   systemd: 
     daemon_reload: True
   become: True
   
 # TODO make this a handler
 - name: Reload the daemon for the services
   service: 
     name: "{{ item.name }}"
     enabled: yes
     state: restarted
   loop: "{{ master_services }}"
   loop_control: 
     label: "{{ item.display_name }} Service -> {{ item.name }}"
   become: True
 
 - name: Allow Kubernetes API Server to fully initialize
   pause:
     seconds: 90
     
 #TODO: these node-routes are hard coded, on a day far far from now, MAYBE templatized and smartly created
 #- name: Create the pod-routes file for each node. Sets routes to get outbound connections from the calico network
 #  copy: 
 #    src: "{{  role_path  }}/files/node-routes"
 #    dest: "/etc/network/if-up.d/node-routes"
 #    mode: "0775"
 #  become: yes
 
 - name: configure routes to nodes (pod routes)
   command: "ip route add {{ hostvars[item].cni_host_subnet }} via {{ hostvars[item].public_ip }}"
   loop: "{{ groups['nodes'] }}"
   register: cmd_result
   become: yes
   failed_when:
   - "'answers: File exists' not in cmd_result.stderr"
   - "cmd_result.rc != 0"
