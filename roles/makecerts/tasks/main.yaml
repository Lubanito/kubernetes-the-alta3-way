---
- name: Create cert directories
  file: 
    path: "{{ item }}"
    state: directory
  with_items:
  - "{{ cert_dir }}"
  - "{{ config_dir }}"
  - "{{ csr_dir }}"

- name: Install dependencies with get_url -> cfssl, cfssljson, kubectl
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  with_items:
  - { url: "{{ cfssl_url }}", 
      dest: /usr/local/bin/cfssl, 
      mode: '0755' }
  - { url: "{{ cfssljson_url }}", 
      dest: /usr/local/bin/cfssljson, 
      mode: '0755' }
  - { url: "{{ kubectl.url }}",
      dest: "{{ kubectl.path }}",
      mode: '0755' }
  become: yes    

# Deploy certificate configuration data 
- name: Deply certificate generation configuration files
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
   - { src: "{{ role_path }}/files/ca-config.json",
       dest: "{{ ca_config_file }}"}
   # CSR files
   # TODO replace csr files with j2 templates
   - src: "{{ role_path }}/files/ca-csr.json"
     dest: "{{ ca_csr_config_file }}"
   - src: "{{ role_path }}/files/kubernetes-csr.json"
     dest: "{{ k8s_csr_config_file }}"
   - src: "{{ role_path }}/files/admin-csr.json"
     dest: "{{ admin_csr_config_file }}"

# TODO make all csr generation be from a template
- name: Generate the certificate config file for nodes (file same on all nodes)
  template:
    src: "{{ role_path }}/templates/node-csr.json.j2" 
    dest: "{{ csr_dir }}/{{ item }}-csr.json"
  loop: "{{ groups['nodes'] }}"
       
# Generates ca.pem and ca-key.pem when do not already exist
- name: Generate a self-signed CA cert and private key for the k8s cloud
  shell: "cfssl gencert -initca {{ ca_csr_config_file }} | cfssljson -bare ca"
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ ca_pem_file }}" # also ca-key.pem, ca.csr

# Generates kubernetes.pem and kubernetes-key.pem when do not already exist
- name: Generate Certificate and private key for k8s API server
  shell: cfssl gencert \
         -ca={{ ca_pem_file }} \
         -ca-key={{ ca_key_file }} \
         -config={{ ca_config_file }} \
         -hostname={{ apiserver_cluster_ip }},{{ master_ips_csv }},127.0.0.1,kubernetes.default \
         -profile=kubernetes {{ k8s_csr_config_file }} | cfssljson -bare kubernetes
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ k8s_pem_file }}" # also kubernetes.csr kubernetes-key.pem

#Generate the admin certificates to setup for 
- name: Generate admin certificates 
  shell: cfssl gencert \
         -ca={{ ca_pem_file }} \
         -ca-key={{ ca_key_file }} \
         -config={{ ca_config_file }} \
         -profile=kubernetes {{ admin_csr_config_file }} | cfssljson -bare admin 
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ admin_pem_file }}" # also admin.csr admin-key.pem

- name: Generate the specific certificate and Private key for each node when it does not already exist
  shell: cfssl gencert \
         -ca={{ ca_pem_file }} \
         -ca-key={{ ca_key_file }} \
         -config={{ ca_config_file }} \
         -hostname={{ hostvars[item].inventory_hostname }},{{ hostvars[item].ansible_host }} \
         -profile=kubernetes {{ csr_dir }}/{{ hostvars[item].inventory_hostname }}-csr.json | cfssljson -bare {{ hostvars[item].inventory_hostname }}
  args:
    chdir: "{{ cert_dir }}"
    creates: "{{ cert_dir }}/{{ item }}.pem" # also admin.csr admin-key.pem
  loop: "{{ groups['nodes'] }}"

- name: Discover if encryption config has already been generated
  stat: 
    path: "{{ encryption_config_file }}"
  register: ecf

- name: Generate an encryption key 
  shell: head -c 32 /dev/urandom | base64
  args:
    creates: "{{ encryption_config_file }}"
  register: encryption_key # used in template file
  when: ecf.stat.exists == False

- name: Generate the encryption config file
  template: 
    src: "{{ role_path }}/templates/encryption-config.yaml.j2"
    dest: "{{ encryption_config_file }}"
  when: ecf.stat.exists == False


